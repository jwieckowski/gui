{
  "tab-1": "Decision making",
  "tab-2": "Instructions",
  "tab-3": "File format",
  "tab-4": "Technology",

  "api-docs": "Server documentation",
  "server": "Server",
  "server-description-text-1": "Built on the REST (Representational State Transfer) convention API (Application Programming Interface)",
  "server-description-text-2": "Written in Python and based on the Flask-RESTX framework. Its functionalities provide support for multi-criteria calculations based on the structure created in the graphical interface.",
  "server-description-text-3": "Multi-criteria computational logic is built on two Python language programming libraries focused on multi-criteria decision-making in an crisp and fuzzy environment. These libraries provide access to the most commonly used multi-criteria techniques, with related methods providing the capabilities to determine the weights of criteria or metrics used in decision-making methods.",

  "application": "Web application",
  "app-description-text-1": "Built on the React framework, one of the most popular and developed technologies for creating web applications.",
  "app-description-text-2": "Application state managed using the Redux Toolkit, allowing changes to the application to be controlled simply and efficiently, thus allowing productive use of server resources.",
  "app-description-text-3": "The React-Draggable package was used to create the structures of the decision models, which allows elements to be moved around on the page and enables a highly configurable operation.",
  "app-description-text-4": "The React-Xarrows package was used as a complementary package to create decision system structures and connections between them, which allows blocks to be linked to individual functionalities.",

  "mcda-problems": "MULTI-CRITERIA DECISION ANALYSIS",
  "app-mcda": "DECISION-MAKING TECHNIQUES IN THE APPLICATION",

  "mcda-description-text-1": "We are constantly confronted with problems that require us to decide between options. This can relate to personal problems, such as the choice of clothes, accessories or electronic equipment, as well as more complex issues at a professional level, such as the choice of a company to work with or the choice of materials and resources for manufacturing products. In these situations, we base our decisions on a set of criteria that allow us to assess the attractiveness of the available options. However, as the number of criteria in a problem increases, our analytical capabilities decrease and our decisions may not take into account all the relevant factors. Decision Support Systems (DSS) come to the rescue, allowing us to assess the available decision options in a structured and comprehensive manner.",
  "mcda-description-text-2": "Such systems are usually based on Multi-Criteria Decision Making / Multi-Criteria Decision Analysis methods. The operation of these methods allows multiple decision factors to be taken into account, based on which the evaluation of the options under consideration is carried out. The main aspects that are taken into account in the evaluation carried out by these systems are the set of decision criteria, their relevance and the decision matrix, which quantifies the performance of each option against each criterion. This data allows us to carry out the analysis and obtain information on the attractiveness of each of the available decision options.",
  "mcda-description-text-3": "However, the design of such systems raises a number of challenges that need to be addressed in order to obtain the most reliable results. One problem is the availability of multiple evaluation methods, which makes it a difficult task to identify which methods guarantee more reliable results than others. In addition, how to determine the relevance of the criteria in a problem is also a challenge, as they may have different importance depending on our preferences, feelings, or uncertainty about the problem. This makes it necessary to base one's decisions by taking into account the propositions from different evaluation methods.",
  "app-functions-text-1": "The application for the graphical design of decision models allows the rapid and efficient prototyping of structures based on which a multi-criteria evaluation is carried out and potential solutions are proposed. In the classical approach, the development of decision support systems and decision models is a process that requires complex implementations of individual methods and combining them into a sequence of operations to produce an evaluation. With the proposed interface, the complex implementation process can be avoided and ready-to-use tools for performing multi-criteria calculations can be used.",
  "app-functions-text-2": "The designed solution is based on popular techniques from the area of multi-criteria decision-making. The user has access to various ways of defining input data, the way of determining the relevance of criteria weights, a number of techniques used for evaluating decision-making options, or comparing their results among each other. By making the above-mentioned functionalities available in one place and providing quick access to their use, it is possible to reduce the time required to implement decision-making systems dedicated to different problems.",
  "app-functions-text-3": "Using the application allows rapid prototyping, the creation of visual structures representing the decision-making process and connections between the techniques used, making it easier to understand how the assessment of the attractiveness of the options analysed is carried out. Giving up the need to implement the individual methods used for multi-criteria evaluation provides a lower entry level for the design of decision models and widens the potential audience.",

  "crisp-json": "JSON: Crisp data",
  "crisp-json-description-text-1": "The JavaScript Object Notation (JSON) file should contain two keys with values in the form of arrays: 'matrix' - a two-dimensional array with the data that will be used for the multi-criteria calculation; 'criteriaTypes' - a list with the criteria types, where -1 means cost type and 1 means profit type.",
  "crisp-json-description-text-2": "A valid array table should not contain text data or blank fields. The values in each column should not be the same. Each row represents a decision option and each column represents a criterion that is considered in the problem.",
  "crisp-json-description-text-3": "No value other than 1 or -1 should appear in the criteria types. The number of values in the criteria types should equal the number of columns in the 'matrix'.",

  "fuzzy-json": "JSON: Fuzzy data",

  "fuzzy-json-description-text-1": "The JavaScript Object Notation (JSON) file should contain two keys with values in the form of arrays: 'matrix' - a three-dimensional array with the data represented as Triangular Fuzzy Numbers that will be used for the multi-criteria calculation; 'criteriaTypes' - a list with the criteria types, where -1 means cost type and 1 means profit type.",
  "fuzzy-json-description-text-2": "A valid array table should not contain text data or blank fields. The values in each column should not be the same. Each row represents a decision option and each column represents a criterion that is considered in the problem. Each element should be represented as Triangular Fuzzy Number [a, m, b], where a is a lower value of TFN, m is a middle value of TFN, and b is an upper value of TFN. The a, m, b values should be ordered ascending or be equal.",
  "fuzzy-json-description-text-3": "No value other than 1 or -1 should appear in the criteria types. The number of values in the criteria types should equal the number of columns in the 'matrix'.",

  "crisp-csv": "CSV: Crisp data",

  "crisp-csv-description-text-1": "Comma-Separated Values (CSV) format files and the data they contain should be divided into two sections. The first should represent the decision matrix in the problem. The second, written after a blank line separating the sections, should represent the criteria types.",
  "crisp-csv-description-text-2": "The matrix represents the decision options in the rows and the criteria considered in the problem in the columns. The values in the matrix in a single row should be separated by commas, and the new row of the decision matrix should be written on a new line. The matrix should not contain empty values or text characters.",
  "crisp-csv-description-text-3": "The number of criteria types should equal the number of columns in the matrix. The criterion types should only be represented by the values -1 for the cost type, and 1 for the profit type. Values should be separated by commas.",

  "fuzzy-csv": "CSV: Fuzzy data",

  "fuzzy-csv-description-text-1": "Comma-Separated Values (CSV) format files and the data they contain should be divided into two sections. The first should represent the decision matrix in the problem. The second, written after a blank line separating the sections, should represent the criteria types.",
  "fuzzy-csv-description-text-2": "The matrix represents the decision options in the rows and the criteria considered in the problem in the columns. The values in the matrix in a single row should be separated by commas, and the new row of the decision matrix should be written on a new line. The matrix should not contain empty values or text characters. Each element should be represented as Triangular Fuzzy Number [a, m, b], where a is a lower value of TFN, m is a middle value of TFN, and b is an upper value of TFN. The values of a, m, b should be separated by a space, not a comma. Comma should be used to separate the TFN in a single row.",
  "fuzzy-csv-description-text-3": "The number of criteria types should equal the number of columns in the matrix. The criterion types should only be represented by the values -1 for the cost type, and 1 for the profit type. Values should be separated by commas.",

  "crisp-xlsx": "XLSX: Crisp data",

  "crisp-xlsx-description-text-1": "XLSX (Microsoft Excel) files should be formatted so that the matrix and criteria types are separated by an unfilled line with values.",
  "crisp-xlsx-description-text-2": "In a matrix, the rows represent the alternatives and the columns represent the criteria in the problem. Each row should contain an equal number of values.",
  "crisp-xlsx-description-text-3": "The criteria types represent the preferred value direction. -1 represents the cost type and a value of 1 represents the profit type. The number of values in the last row should equal the number of columns in the matrix.",

  "fuzzy-xlsx": "XLSX: Fuzzy data",

  "fuzzy-xlsx-description-text-1": "XLSX (Microsoft Excel) files should be formatted so that the matrix and criteria types are separated by an unfilled line with values.",
  "fuzzy-xlsx-description-text-2": "In a matrix, the rows represent the alternatives and the columns represent the criteria in the problem. Each row should contain an equal number of values. In one cell, the values should be represented by Triangular Fuzzy Number. Each element should be represented as Triangular Fuzzy Number [a, m, b], where a is a lower value of TFN, m is a middle value of TFN, and b is an upper value of TFN. The values a, m, b should be separated by space, not a comma.",
  "fuzzy-xlsx-description-text-3": "The criteria types represent the preferred value direction. -1 represents the cost type and a value of 1 represents the profit type. The number of values in the last row should equal the number of columns in the matrix.",

  "file-bad-format": "Formatting the file in any other way than indicated above may result in calculation errors.",

  "download-example-file": "Example file",

  "instructions-text-1": "The tool for the graphical design of structural decision-making models allows an interface to be used for the quick prototyping of decision-making systems. The application is based on the use of blocks representing different functionalities from the field of multi-criteria assessment. By placing subsequent blocks in the workspace and creating connections between them, it is possible to create a structure based on which the evaluation is carried out. The use of a graphical tool for design purposes reduces the time spent on design and produces initial results. It also makes it easier to visualize the entire decision-making process and understand the connections occurring between elements.",

  "connections-structure": "Design of decision-making models",
  "connections-structure-text-1": "The application allows quick design and prototyping of decision models based on the established assumptions. A basic decision model requires that elements representing 3 main functionalities are used: the creation of a decision matrix, the determination of criteria weights and a multi-criteria evaluation method. Using these, a basic decision model can be created to be used for multi-criteria calculations.",
  "connections-structure-text-2": "Moreover, the designed structures may have additional elements that enrich the performance of the model for selected aspects of evaluation. As further elements, the calculation of the positional ranking based on the evaluation of multi-criteria methods and the determination of correlations between the obtained results can be used.",
  "connections-structure-text-3": "The diagram below shows how the elements available in the application are connected. According to the depicted flowchart, graphical structures of decision-making models can be created. At the same time, the flow of consecutive connections shows which types of elements can be connected directly to each other. An attempt to connect elements that are not in direct contact with each other will be unsuccessful (this means that the elements responsible for representing the decision matrix cannot be connected directly with the multi-criteria method).",

  "basic-structure": "Basic model structure",
  "basic-structure-text-1": "To create the basic decision model, it is necessary to use the indicated 3 elements: the selected type of decision matrix representation, the selected method for determining the criteria weights and the selected multi-criteria method. Once the selected blocks have been added to the workspace and linked together, the basic structure is ready. Connecting blocks is done by pressing on the selected block, followed by pressing on the block to which the connection is to be made. In order to be able to perform calculations for the designed system, the types of criteria in the problem must be defined ('Cost' for criteria that are expected to reach the smallest possible values, and 'Profit' for criteria whose values should reach the largest possible values). It is possible to do this from the level of editing the decision matrix block, where, by clicking on the settings icon, the required data can be completed.",
  "basic-structure-text-2": "The selected multi-criteria methods also allow additional information to be completed on the assessment run. In the diagram shown, you can see that the settings icon is visible in the block for the TOPSIS method. The settings for the multi-criteria methods include modifications to metrics such as decision matrix data normalization methods, fuzzy number distance metrics, or defuzzification methods (calculating crisp values from fuzzy numbers). If the user does not modify the available settings, the evaluation will use the default metrics. On the other hand, running the method block settings and modifying them will result in other metrics being used in the evaluation rather than those set by default.",

  "multiple-mcda-structure": "Structure for comparing multi-criteria methods",
  "multiple-mcda-structure-text-1": "The application allows the creation of more complex decision-making models that can be used for a variety of purposes. One of these is to be able to compare multiple multi-criteria methods and determine how their results differ for the same input data. In this case, for the decision matrix and criteria weighting method, connections can be made to multiple multi-criteria methods. It allows the same data set to be used in multiple methods, represented by connected blocks. In this way, it is possible to investigate the potential differences present in the evaluations obtained from the different methods and determine whether, on the data set used, the multi-criteria methods guarantee consistent results.",

  "multiple-weights-structure": "Structure for comparing criteria weighting methods",
  "multiple-weights-structure-text-1": "In the interface, a structure can also be modelled to compare how a particular criterion weighting method affects the results obtained. For this purpose, it is possible to use blocks which take into account the use of multiple criteria weighting methods in combination with a decision matrix and a multi-criteria method. The situation indicated makes it possible to determine whether the different importance of the individual criteria in the problem can affect the attractiveness of the decision options analyzed.",

  "complex-structure": "Complex model structure",
  "complex-structure-text-1": "The tool also allows the design of more complex structures that use multiple blocks of a given type, and by creating connections between them, different computational configurations can be created. The diagram below shows a model using two decision matrices connected by different methods for determining the criteria weights. In this case, the matrix with ID 1 will be used to calculate the criteria weights using the ANGLE and ENTROPY methods. On the other hand, the matrix with ID 2 will be used to calculate the weights using the ENTROPY and VARIANCE methods. It can be seen from this example that it is possible to use one common block to perform calculations on different input data.",
  "complex-structure-text-2": "Analysing the diagram further, it is apparent that for the matrix with ID 1, two criteria weighting methods (ANGLE and ENTROPY) and three multi-criteria methods (ARAS, COCOSO and OCRA) will be used. On the other hand, for the matrix with ID 2, two methods for determining criteria weights (ENTROPY and VARIANCE) are also combined with three multi-criteria methods (COCOSO, OCRA and MOORA). This makes it possible to see that the ENTROPY method is a common part of both decision matrices, so that the combined multi-criteria methods with this method for determining criteria weights will be used in the calculations performed on both input data sets.",
  "complex-structure-text-3": "In addition to the required blocks, blocks with functionality for determining the positional ranking were used for the ARAS and COCOSO methods for the decision matrix with ID 1 and for the COCOSO method for the matrix with ID 2. The ranking functionality block allows the positional ranking to be determined based on the evaluations obtained from the multi-criteria methods, which return a result in the form of a preference values. The calculation of the ranking allows for an easier interpretation of the results obtained.",
  "complex-structure-text-4": "A block was also used to calculate the correlation between the results using the PEARSON method. The similarity of results in the presented schema will take into account the results from the COCOSO method for the decision matrix with ID 1, and the COCOSO, OCRA and MOORA methods for the matrix with ID 2 separately. The presented structure could have been created by using individual blocks for each method, thus not creating linked connections. This option would have allowed for more transparency in the model structure. However, the example is presented to show that the application allows for a reduction in the number of blocks used and that linked connections are supported.",

  "application-tutorial": "Examples of structures for creating decision-making models are presented above. The entire functionality of the tool also includes a list of available methods, a panel of available actions, a panel for modifying the design, or an area for displaying results along with their filtering. Instructions on how to use the entire functionality of the application and the available workspace are available in the 'Calculations' tab."
}
