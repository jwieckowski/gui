{
  "tab-1": "Decision making",
  "tab-2": "Instructions",
  "tab-3": "File format",
  "tab-4": "Technology",
  "tab-5": "Updates",
  "tab-6": "Rate us",

  "api-docs": "Server documentation",
  "server": "Server",
  "server-description-text-1": "Built on the REST (Representational State Transfer) convention API (Application Programming Interface)",
  "server-description-text-2": "Written in Python and based on the Flask-RESTX framework. Its functionalities provide support for multi-criteria calculations based on the structure created in the graphical interface.",
  "server-description-text-3": "Multi-criteria computational logic is built on two Python language programming libraries focused on multi-criteria decision-making in an crisp and fuzzy environment. These libraries provide access to the most commonly used multi-criteria techniques, with related methods providing the capabilities to determine the weights of criteria or metrics used in decision-making methods.",

  "application": "Web application",
  "app-description-text-1": "Built on the React framework, one of the most popular and developed technologies for creating web applications.",
  "app-description-text-2": "Application state managed using the Redux Toolkit, allowing changes to the application to be controlled simply and efficiently, thus allowing productive use of server resources.",
  "app-description-text-3": "The React-Draggable package was used to create the structures of the decision models, which allows elements to be moved around on the page and enables a highly configurable operation.",
  "app-description-text-4": "The React-Xarrows package was used as a complementary package to create decision system structures and connections between them, which allows blocks to be linked to individual functionalities.",

  "mcda-problems": "MULTI-CRITERIA DECISION ANALYSIS",
  "app-mcda": "DECISION-MAKING TECHNIQUES IN THE APPLICATION",

  "mcda-description-text-1": "Every day we face choices that require us to evaluate available options. This includes personal decisions such as choosing clothes or buying electronic equipment, as well as more complex professional issues like selecting a business partner or materials for production. In these situations, our decisions are based on a set of criteria to evaluate the available options. However, as the number of criteria increases, our analytical capabilities diminish, and the decisions we make may not consider all essential factors. Decision Support Systems (DSS) come to our aid in these cases, allowing for structured and comprehensive evaluation of available decision options.",
  "mcda-description-text-2": "These systems are often based on Multi-Criteria Decision Making (MCDM) or Multi-Criteria Decision Analysis (MCDA) methods. These methods enable the consideration of multiple decision factors, based on which various options are assessed. The key elements in these assessments are the set of decision criteria, their importance, and the decision matrix, which numerically presents the parameters of each option relative to the criteria. These data enable analysis and provide information about the attractiveness of available options.",
  "mcda-description-text-3": "Designing such systems presents many challenges. One problem is the selection of appropriate evaluation methods, as it is difficult to determine which methods are the most reliable. Additionally, determining the weights of criteria poses a challenge because their importance can vary depending on our preferences, mood, or uncertainty about the problem. Therefore, decisions should be based on the proposals from various evaluation methods.",
  "app-functions-text-1": "The application for graphical design of decision models allows for quick and efficient prototyping of models for multi-criteria evaluation and proposing potential solutions. The traditional approach to creating decision support systems requires complex implementations of individual methods and their integration into a cohesive evaluation process. The proposed interface allows users to avoid the lengthy implementation process by using ready-made tools for multi-criteria calculations.",
  "app-functions-text-2": "The designed solution is based on popular techniques in the field of multi-criteria decision making. Users have access to various ways of defining input data, determining criteria weights, techniques for evaluating decision options, comparing their results, and visualizing them. Bringing these functionalities together in one place and providing quick access to them shortens the time needed to create decision systems for various problems.",
  "app-functions-text-3": "Using the application allows for rapid prototyping, creating visual structures representing the decision-making process, and understanding how the attractiveness of analyzed options is evaluated. Eliminating the need to implement individual methods used for multi-criteria evaluation lowers the entry barrier for designing decision models and broadens the potential user base.",

  "crisp-json": "JSON: Crisp data",
  "crisp-json-description-text-1": "The JavaScript Object Notation (JSON) file should contain two keys with values in the form of arrays: 'matrix' - a two-dimensional array with the data that will be used for the multi-criteria calculation; 'criteriaTypes' - a list with the criteria types, where -1 means cost type and 1 means profit type.",
  "crisp-json-description-text-2": "A valid array table should not contain text data or blank fields. The values in each column should not be the same. Each row represents a decision option and each column represents a criterion that is considered in the problem.",
  "crisp-json-description-text-3": "No value other than 1 or -1 should appear in the criteria types. The number of values in the criteria types should equal the number of columns in the 'matrix'.",

  "fuzzy-json": "JSON: Fuzzy data",

  "fuzzy-json-description-text-1": "The JavaScript Object Notation (JSON) file should contain two keys with values in the form of arrays: 'matrix' - a three-dimensional array with the data represented as Triangular Fuzzy Numbers that will be used for the multi-criteria calculation; 'criteriaTypes' - a list with the criteria types, where -1 means cost type and 1 means profit type.",
  "fuzzy-json-description-text-2": "A valid array table should not contain text data or blank fields. The values in each column should not be the same. Each row represents a decision option and each column represents a criterion that is considered in the problem. Each element should be represented as Triangular Fuzzy Number [a, m, b], where a is a lower value of TFN, m is a middle value of TFN, and b is an upper value of TFN. The a, m, b values should be ordered ascending or be equal.",
  "fuzzy-json-description-text-3": "No value other than 1 or -1 should appear in the criteria types. The number of values in the criteria types should equal the number of columns in the 'matrix'.",

  "crisp-csv": "CSV: Crisp data",

  "crisp-csv-description-text-1": "Comma-Separated Values (CSV) format files and the data they contain should be divided into two sections. The first should represent the decision matrix in the problem. The second, written after a blank line separating the sections, should represent the criteria types.",
  "crisp-csv-description-text-2": "The matrix represents the decision options in the rows and the criteria considered in the problem in the columns. The values in the matrix in a single row should be separated by commas, and the new row of the decision matrix should be written on a new line. The matrix should not contain empty values or text characters.",
  "crisp-csv-description-text-3": "The number of criteria types should equal the number of columns in the matrix. The criterion types should only be represented by the values -1 for the cost type, and 1 for the profit type. Values should be separated by commas.",

  "fuzzy-csv": "CSV: Fuzzy data",

  "fuzzy-csv-description-text-1": "Comma-Separated Values (CSV) format files and the data they contain should be divided into two sections. The first should represent the decision matrix in the problem. The second, written after a blank line separating the sections, should represent the criteria types.",
  "fuzzy-csv-description-text-2": "The matrix represents the decision options in the rows and the criteria considered in the problem in the columns. The values in the matrix in a single row should be separated by commas, and the new row of the decision matrix should be written on a new line. The matrix should not contain empty values or text characters. Each element should be represented as Triangular Fuzzy Number [a, m, b], where a is a lower value of TFN, m is a middle value of TFN, and b is an upper value of TFN. The values of a, m, b should be separated by a space, not a comma. Comma should be used to separate the TFN in a single row.",
  "fuzzy-csv-description-text-3": "The number of criteria types should equal the number of columns in the matrix. The criterion types should only be represented by the values -1 for the cost type, and 1 for the profit type. Values should be separated by commas.",

  "crisp-xlsx": "XLSX: Crisp data",

  "crisp-xlsx-description-text-1": "XLSX (Microsoft Excel) files should be formatted so that the matrix and criteria types are separated by an unfilled line with values.",
  "crisp-xlsx-description-text-2": "In a matrix, the rows represent the alternatives and the columns represent the criteria in the problem. Each row should contain an equal number of values.",
  "crisp-xlsx-description-text-3": "The criteria types represent the preferred value direction. -1 represents the cost type and a value of 1 represents the profit type. The number of values in the last row should equal the number of columns in the matrix.",

  "fuzzy-xlsx": "XLSX: Fuzzy data",

  "fuzzy-xlsx-description-text-1": "XLSX (Microsoft Excel) files should be formatted so that the matrix and criteria types are separated by an unfilled line with values.",
  "fuzzy-xlsx-description-text-2": "In a matrix, the rows represent the alternatives and the columns represent the criteria in the problem. Each row should contain an equal number of values. In one cell, the values should be represented by Triangular Fuzzy Number. Each element should be represented as Triangular Fuzzy Number [a, m, b], where a is a lower value of TFN, m is a middle value of TFN, and b is an upper value of TFN. The values a, m, b should be separated by space, not a comma.",
  "fuzzy-xlsx-description-text-3": "The criteria types represent the preferred value direction. -1 represents the cost type and a value of 1 represents the profit type. The number of values in the last row should equal the number of columns in the matrix.",

  "file-bad-format": "Formatting the file in any other way than indicated above may result in calculation errors.",

  "download-example-file": "Example file",

  "instructions-text-1": "The tool for graphical design of structural decision models allows for the use of an interface for quick prototyping of decision systems. The application is based on the use of blocks representing various functionalities in the area of multi-criteria evaluation. Placing subsequent blocks in the workspace and creating connections between them allows for the creation of a structure on which the evaluation is based. Using a graphical tool for design purposes reduces the time spent on designing and obtaining initial results. It also facilitates the visualization of the entire decision-making process and understanding the connections between elements.",

  "connections-structure": "Designing decision models",
  "connections-structure-text-1": "The application allows for quick design and prototyping of decision models based on accepted assumptions. The basic decision model involves the use of elements representing three main functionalities: creating a decision matrix, determining criteria weights, and a multi-criteria evaluation method. Using these elements, a basic decision model can be created, which will be used for multi-criteria calculations.",
  "connections-structure-text-2": "Designed structures can include additional elements that enrich the model's operation with selected evaluation aspects. Additional elements can be used, such as calculating positional ranking based on multi-criteria methods, determining correlations between obtained results, or visualizing the results.",
  "connections-structure-text-3": "The diagram below shows the connections between elements available in the application. It presents a sample structural model based on all available types of functionalities in the application. Additionally, the sequence of connections shows which types of elements can be directly connected to each other.",

  "basic-structure": "Minimum model structure",
  "basic-structure-text-1": "To create a basic decision model, it is necessary to use the indicated two elements: the selected type of decision matrix representation and the selected method for determining criteria weights. After adding the selected blocks to the workspace and connecting them, the minimal decision model is ready. Connecting the blocks is done by clicking on the selected block and then clicking on the block to which the connection is to be made. To perform calculations for the designed system, it is necessary to define the types of criteria in the problem ('Cost' for criteria that should have the lowest possible values, and 'Benefit' for criteria that should have the highest possible values). This can be done from the decision matrix block settings, where clicking on the settings icon allows you to fill in the required data.",

  "multiple-mcda-structure": "Structure for comparing multi-criteria methods",
  "multiple-mcda-structure-text-1": "The application allows for the creation of more complex decision models that can be used for various purposes. One of them is the ability to compare multiple multi-criteria methods and determine how their results differ for the same input data. In this case, for the decision matrix and the criteria weight determination method, connections can be made to multiple multi-criteria methods. This allows the same set to be used in multiple methods, represented by connected blocks. This way, potential differences in the assessments obtained from different methods can be examined, and it can be determined whether the multi-criteria methods guarantee consistent results on the used data set.",
  "multiple-mcda-structure-text-2": "Selected multi-criteria methods allow for additional information to be provided about the evaluation process. In the shown diagram, the MCDA method blocks display a settings icon. Multi-criteria method settings include modifications to metrics such as decision matrix data normalization methods, fuzzy number distance metrics, or defuzzification methods (calculating crisp values from fuzzy numbers).",

  "multiple-weights-structure": "Structure for complex comparison of methods",
  "multiple-weights-structure-text-1": "The interface can also model a structure that allows for comparing how different combinations of methods affect the results. For this purpose, blocks that include the use of multiple criteria weight determination methods in conjunction with the decision matrix can be used. Additionally, the selected weight blocks can be connected to various multi-criteria methods, allowing for problem analysis based on diverse assumptions. The indicated model allows for determining whether different importance of individual criteria in the problem can affect the attractiveness of analyzed decision options and whether the used MCDA methods will guarantee consistent results.",

  "complex-structure": "Structure for correlation analysis of results and data visualization",
  "complex-structure-text-1": "The tool also allows for designing decision models that use multiple blocks of a given type, and by creating connections between them, various computational configurations can be created. The following example illustrates a decision model in which for the defined decision matrix and weights entered by the user, the COMET and ARAS methods are used to evaluate the attractiveness of decision options. Then, the RANK block allows for calculating positional ranking, which is used to calculate the correlation between results using the weighted Spearman coefficient and WS coefficient.",
  "complex-structure-text-2": "The example shown below illustrates the use of blocks responsible for generating visualizations of data obtained in the calculation process. The determined criteria weight vectors have been redirected to the WEIGHTS DISTRIBUTION method, which generates a chart with the distribution of weight values. Meanwhile, the RANKING FLOW block shows the ranking progress of individual alternatives evaluated by the MOORA method in conjunction with different criteria weight methods.",

  "updates": "Application updates",
  "rate-us": "Rate us",
  "rate-us-text-1": "We would be grateful if you would share with us your opinion on the application under development. Your response will give us valuable guidance on how to develop and improve this decision support tool",
  "rate-question-1": "Is the app helpful to build and visualize the structural decision models?",
  "rate-question-2": "Is building prototypes with graphical interface easy?",
  "rate-question-3": "How do you rate the application overall?",
  "rate-question-4": "What would you like to change in the app?",
  "rate-question-5": "How easy is the app to use?",
  "rate-question-6": "How do you rate the performance of the app?",
  "rate-question-7": "Are there any features you would like to see in future updates?",
  "rate-required": "This field is required",

  "application-tutorial": "Examples of structures for creating decision-making models are presented above. The entire functionality of the tool also includes a list of available methods, a panel of available actions, a panel for modifying the design, or an area for displaying results along with their filtering. Instructions on how to use the entire functionality of the application and the available workspace are available in the 'Calculations' tab."
}
